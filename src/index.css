@import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap");

/* 
 * Parcel needs 'npm:' prefix to import css from node_modules.
 */
@import "npm:open-props/index.css";
@import "npm:open-props/palette.css";
@import "npm:open-props/normalize.css";
@import "npm:open-props/buttons.css";
@import "npm:open-props/forms.css";
@import "npm:open-props/animations.css";
@import "npm:open-props/utilities.css";

:root {
  --page-background: unset;
}

[data-theme="light"],
.light {
  --surface-1: white;
  --surface-2: var(--color-1);
  --surface-3: var(--color-3);
  --surface-document: var(--color-4);
  --well-1: var(--color-5);
  --well-2: var(--color-6);
  --text-1: var(--color-16);
  --text-2: var(--color-12);

  button {
    --_ink-shadow: var(--_ink-shadow-light);
    --_bg: var(--_bg-light);
  }
}
[data-theme="dark"],
.dark {
  --surface-1: var(--color-11);
  --surface-2: var(--color-12);
  --surface-3: var(--color-13);
  --surface-document: var(--color-14);
  --well-1: var(--color-15);
  --well-2: var(--color-16);
  --text-1: var(--color-1);
  --text-2: var(--color-5);

  --link: oklch(90% 80% var(--palette-hue));
  --link-visited: oklch(90% 80% calc(var(--palette-hue) * 1.2));

  button {
    --_ink-shadow: var(--_ink-shadow-dark);
    --_bg: var(--_bg-dark);
  }
  button[type="submit"] {
    --_bg: var(--surface-3);
  }
  dialog {
    background-color: var(--surface-2);
  }
}

body::before {
  background: var(--page-background);
  background-size: cover;
  opacity: 0.4;
  content: " ";
  display: block;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}
/* idk what is this in open-props. this cause the page larger then full height. */
body::after {
  display: none;
}

html,
body,
main {
  height: 100%;
}

main {
  opacity: var(--ui-opacity);
  line-height: 1.5;
  font-family: "IBM Plex Sans", "Punctuation SC", "Inter", ui-sans-serif,
    system-ui, "PingFang SC", "Noto Sans CJK SC", "Noto Sans SC", "Heiti SC",
    "Microsoft YaHei", "DengXian", sans-serif, "Apple Color Emoji",
    "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  overflow-x: hidden;
  display: grid;
  grid-template-rows: var(--size-8) calc(100% - var(--size-8));
  /* grid-template-columns: repeat(1, 1fr); */
}

h1 {
  font-size: var(--font-size-6);
}
h2 {
  font-size: var(--font-size-5);
}
h3 {
  font-size: var(--font-size-4);
}
h4 {
  font-size: var(--font-size-3);
}
h5 {
  font-size: var(--font-size-2);
}
h6 {
  font-size: var(--font-size-1);
}

#documentStatus {
  margin-inline-end: auto;
  display: flex;
  align-items: center;
  gap: var(--size-2);

  /* Vertical bar between save button and status */
  hr {
    width: var(--border-size-1);
    margin-inline-end: var(--size-1);
    height: 0.8lh;
    background-color: var(--surface-1);
  }
  div {
    border-radius: 50%;
    transition: background-color 0.5s var(--ease-elastic-in-out-5);
    width: var(--size-2);
    height: var(--size-2);
  }
  span {
    font-size: var(--font-size-0);
    padding-inline: var(--size-2);
    border-radius: var(--radius-3);
    background-color: var(--surface-3);
  }
}
#documentStatus.saved div {
  background-color: rgb(148, 216, 45);
}
#documentStatus.saving div {
  background-color: rgb(252, 196, 25);
}
#documentStatus.unsaved div {
  background-color: rgb(255, 107, 107);
}

#navbar {
  padding-inline: var(--size-3);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--size-2);
  padding-bottom: var(--border-size-1);
  border-bottom: var(--border-size-1) solid var(--surface-3);
  box-shadow: var(--shadow-1);

  button {
    padding: 0;
    outline-color: unset;
    background: unset;
    border: unset;
  }

  #documentStatus button,
  label,
  #settingsBtn {
    border-radius: var(--radius-2);
    padding: var(--size-1);
  }
  #documentStatus button:hover,
  label:hover,
  #settingsBtn:hover {
    background-color: var(--surface-2);
  }
}

#addStickyDropdownContainer {
  position: relative;

  div:first-child {
    display: grid;
    grid-template-columns: 2fr 1fr;

    button {
      /* background-color: var(--surface-2); */
      padding-block: var(--size-1);
    }
    button:hover {
      background-color: var(--surface-2);
    }
    button:nth-child(1) {
      border-radius: var(--radius-2) 0 0 var(--radius-2);
    }
    button:nth-child(2) {
      border-radius: 0 var(--radius-2) var(--radius-2) 0;
    }
  }

  .dropdownButtons {
    position: absolute;
    margin-top: var(--size-1);
    display: grid;
    background-color: var(--surface-2);
    border: var(--border-size-1) solid var(--surface-3);
    border-radius: var(--radius-conditional-2);
    box-shadow: var(--shadow-2);
    padding-block: var(--size-1);
    z-index: var(--layer-important);

    button {
      display: flex;
      width: 100%;
      justify-content: space-between;
      align-items: center;
      border-radius: var(--radius-conditional-1);
      font-size: 0.9rem;
      white-space: nowrap;
      padding-inline: var(--size-2);
      padding-block-start: var(--size-1);
      padding-block-end: calc(
        var(--size-1) + 0.052em
      ); /* 0.052em is the myth value from https://tonsky.me/blog/centering/ */
    }
    button:hover {
      background-color: var(--surface-3);
    }
  }
}

#stickySizeDummy {
  width: var(--size-fluid-9);
  height: 0;
}

.sticky {
  position: absolute;
  cursor: default;
  width: var(--size-fluid-9);
  height: var(--size-fluid-9);
  min-width: var(--size-fluid-6);
  min-height: var(--size-fluid-6);
}
.stickyShell {
  background-color: var(--surface-2);
  color: var(--text-2);
  box-shadow: var(--shadow-2);
  border-radius: var(--radius-2);
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  border: var(--border-size-1) solid var(--well-1);
  overflow: hidden;
}
.ghost {
  .stickyShell {
    background-color: unset;
    border-color: transparent;
    color: none;
    box-shadow: none;
  }

  .resizeHandle {
    pointer-events: none;
  }
  .stickyHeader {
    opacity: 0;
    pointer-events: none;
  }
  .standard textarea::placeholder {
    opacity: 0;
  }
}
.resizeHandle {
  position: absolute;
  background-color: transparent;
}
.resizeHandle.top {
  top: var(--size-00);
  left: var(--size-00);
  right: var(--size-00);
  height: var(--size-2);
  cursor: n-resize;
}
.resizeHandle.right {
  top: var(--size-00);
  right: var(--size-00);
  bottom: var(--size-00);
  width: var(--size-2);
  cursor: e-resize;
}
.resizeHandle.bottom {
  bottom: var(--size-00);
  left: var(--size-00);
  right: var(--size-00);
  height: var(--size-2);
  cursor: s-resize;
}
.resizeHandle.left {
  top: var(--size-00);
  left: var(--size-00);
  bottom: var(--size-00);
  width: var(--size-2);
  cursor: w-resize;
}
.resizeHandle.topLeft {
  top: var(--size-00);
  left: var(--size-00);
  width: var(--size-2);
  height: var(--size-2);
  cursor: nw-resize;
}
.resizeHandle.topRight {
  top: var(--size-00);
  right: var(--size-00);
  width: var(--size-2);
  height: var(--size-2);
  cursor: ne-resize;
}
.resizeHandle.bottomLeft {
  bottom: var(--size-00);
  left: var(--size-00);
  width: var(--size-2);
  height: var(--size-2);
  cursor: sw-resize;
}
.resizeHandle.bottomRight {
  bottom: var(--size-00);
  right: var(--size-00);
  width: var(--size-2);
  height: var(--size-2);
  cursor: se-resize;
}

.maximized {
  height: 100% !important;
  width: 100% !important;
  left: 0 !important;
  top: 0 !important;
  transition: all 0.1s var(--ease-out-5);

  .resizeHandle {
    pointer-events: none;
  }
}
.arranging .sticky {
  transition: all 0.1s var(--ease-out-5);
}

.pin {
  .stickyHeader,
  .resizeHandle {
    pointer-events: none;
  }
  .controls label {
    opacity: 0.5;
  }
}
.pin:not(.ghost) {
  outline: var(--border-size-3) solid var(--well-1);
}

.deleted {
  animation: var(--animation-scale-down), var(--animation-fade-out);
  animation-timing-function: var(--ease-elastic-in-out-4);
}

.stickyHeader {
  background-color: var(--surface-3);
  padding-bottom: var(--border-size-1);
  cursor: grab;
  user-select: none;
}
.stickyHeader,
.resizeHandle {
  touch-action: none;
}

/* TODO: inconsist naming */
.controls {
  float: right;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: var(--size-1);
  padding-inline: var(--size-1);

  button,
  label {
    background: unset;
    cursor: pointer;
    color: var(--text-2);
    padding: 0;
  }
  button:hover,
  label:hover {
    color: var(--text-1);
  }
}

.stickyBody {
  flex-grow: 1;
  padding: var(--size-2);

  .preview {
    height: 100%;
    padding-inline: var(--size-2);
  }
}

.standard.editMode.splitView .stickyBody {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(1, 1fr);
  overflow: auto;

  .preview {
    display: unset;
  }
  .preview:not(:has(iframe)) {
    padding-inline: var(--size-4);
  }
  textarea {
    border-right: var(--size-1) solid var(--well-1);
  }
  textarea:focus {
    outline: unset;
  }
}

.standard {
  .stickyBody:has(.preview:not([hidden])) {
    overflow: auto;
  }
  .stickyBody:has(iframe) {
    padding: 0;
    .preview {
      padding: 0;
    }
  }
  .stickyBody textarea {
    border: none;
    background-color: inherit;
    color: inherit;
    padding: 0;
    border-radius: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    box-shadow: none;
    resize: none;
  }
  textarea {
    min-block-size: unset;
    min-inline-size: unset;
    max-inline-size: unset;
    min-block-size: unset;
    max-block-size: unset;
  }
}

.youtube,
.spotify {
  .stickyBody {
    padding: 0;
  }
}
.ghost.youtube iframe {
  border-radius: 12px;
}

.stickyContainer {
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
}
.autoArrange {
  display: flex;
  justify-content: space-around;
  align-items: center;
  flex-wrap: wrap;

  .sticky {
    position: static;
  }
}

.mainSection {
  position: relative;
}

/* @commandPalette start */
#commandPalette {
  position: fixed;
  top: 35%;
  left: 50%;
  transform: translateX(-50%);
  width: var(--size-content-3);
  background-color: var(--surface-1);
  border-radius: var(--radius-2);
  border: var(--border-size-1) solid var(--well-1);
  box-shadow: var(--shadow-3);
  padding: var(--size-3);
  z-index: var(--layer-important);
}
#searchInput {
  width: 100%;
  padding: var(--size-1) var(--size-1) var(--size-1) var(--size-8);
  border: none;
  border-radius: var(--radius-conditional-2);
  background-color: var(--surface-3);
  color: var(--text-1);
}
#commandList {
  list-style-type: none;
  padding: 0;
  max-height: 300px;
  overflow-y: auto;

  li {
    padding: var(--size-2);
    border-radius: var(--radius-conditional-1);
    max-inline-size: unset; /* Reverts open-props normalize */
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  li:hover,
  li[aria-selected="true"] {
    background-color: var(--surface-3);
  }
  kbd {
    font-size: var(--font-size-0);
    margin-right: var(--size-2);
  }
}
#commandList:not(:empty) {
  margin-top: var(--size-3);
}
/* @commandPalette end */

/* @uploadDialog start */
/* @uploadDialog end */

/* @settings start */
#settings {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-areas: "main";

  nav {
    display: none;
    grid-area: nav;
    align-self: start;
    overflow-y: auto;
    top: 0;
    position: sticky;

    h2 {
      padding-block-start: var(--size-fluid-3);
      padding-block-end: var(--size-fluid-2);
      padding-inline-start: var(--size-6);
      display: block;
    }
    ul {
      padding-inline-start: 0;
      list-style-type: none;
    }
    li {
      a {
        padding-block: var(--size-2);
        text-decoration: none;
        padding-inline-start: var(--size-8);
        display: block;
      }
      a,
      a:visited {
        color: var(--text-1);
      }
      a:hover {
        color: var(--link-visited);
      }
      cursor: pointer;
    }
  }

  /* The main area of settings */
  > div {
    grid-area: main;
    padding: 0 var(--size-fluid-4) var(--size-fluid-1) var(--size-fluid-4);
    display: flex;
    flex-direction: column;
    overflow: auto;

    header {
      padding-bottom: var(--size-3);
    }

    section {
      padding-block-start: var(--size-fluid-3);
    }
    :target {
      h2 {
        color: var(--link);
      }
      h2::before {
        content: "#";
        transform: translateX(-1.2ch);
        position: absolute;
      }
    }
    hr {
      margin-block-start: var(--size-fluid-4);
    }
  }
}
#settingsBtnGroup {
  padding-block-end: var(--size-fluid-4);
}
#langDropdown {
  min-width: var(--size-fluid-8);
}
#appearancePref {
  label {
    display: grid;
    gap: var(--size-1);
  }
  img {
    max-width: var(--size-content-2);
  }
  h3 {
    padding-bottom: var(--size-3);
  }
  #hueWheel {
    touch-action: none;
    background: conic-gradient(
      from 90deg,
      hsl(0, 100%, 50%),
      hsl(60, 100%, 50%),
      hsl(120, 100%, 50%),
      hsl(180, 100%, 50%),
      hsl(240, 100%, 50%),
      hsl(300, 100%, 50%),
      hsl(360, 100%, 50%)
    );
    box-shadow: inset 0 0 var(--size-3) var(--surface-3);
    grid-area: wheel;
  }
  #hueWheel:active {
    cursor: crosshair;
  }
  label:has(.huePreview) {
    justify-items: start;
    gap: var(--size-3);
    margin-bottom: var(--size-4);
  }
  .huePreview {
    display: grid;
    width: var(--size-content-1);
    grid-template-columns: 3fr 1fr;
    grid-template-areas:
      "wheel div1"
      "wheel div2"
      "wheel div3";
    column-gap: var(--size-2);

    div {
      aspect-ratio: var(--ratio-square);
      display: flex;
      justify-content: center;
      align-items: center;
    }
    :nth-child(2) {
      font-size: var(--font-size-5);
      background-color: var(--surface-1);
      grid-area: div1;
    }
    :nth-child(3) {
      font-size: var(--font-size-3);
      background-color: var(--surface-2);
      grid-area: div2;
    }
    :nth-child(4) {
      background-color: var(--surface-3);
      grid-area: div3;
    }
  }
  #uiOpacityInput {
    max-width: var(--size-fluid-8);
  }
  #uiOpacityInput::-webkit-slider-thumb,
  #uiOpacityInput::-moz-range-thumb {
    opacity: var(--ui-opacity);
  }
}
.backgroundPresetContainer {
  display: grid;
  grid-auto-flow: column;
  gap: var(--size-2);
  scroll-snap-type: x mandatory;
  /* padding-inline: var(--gap); */
  /* scroll-padding-inline: var(--size-8); */
}
/* .backgroundPresetContainer button { */
/*   padding: var(--size-5); */
/* } */
.dropzone {
  border-width: var(--border-size-2);
  border-style: dashed;
  border-radius: var(--radius-conditional-3);
  background-size: cover;
  padding: var(--size-5);
  aspect-ratio: var(--ratio-widescreen);
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  gap: var(--size-3);
  cursor: pointer;
}
.dropzone[active] {
  background-color: var(--surface-2);
}
.formGroupHorizontal {
  display: flex;
  align-items: flex-start;
  gap: var(--size-2);
}
.formGroup {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: var(--size-3);
}
#shortcutList {
  display: grid;
  gap: var(--size-3) var(--size-4);

  label {
    display: flex;
    flex-wrap: wrap;
    gap: var(--size-2);
    span {
      width: 100%;
    }
    input {
      font-family: var(--font-mono);
    }
  }
}
#storagePref {
  display: grid;
  gap: var(--size-3);
  label {
    display: grid;
    gap: var(--size-1);
  }
}
/* @settings end */

.icon {
  background-repeat: no-repeat;
  background-image: var(--icon);
  background-position: calc(100% - 0.5ch);
  background-size: auto, 2.25ch;
  min-block-size: 1lh;
  min-inline-size: 1lh;
}
.contextMenu {
  position: fixed;
  display: flex;
  flex-direction: column;
  background-color: var(--surface-1);
  border: var(--border-size-1) solid var(--surface-3);
  border-radius: var(--radius-conditional-2);
  box-shadow: var(--shadow-2);
  padding-block: var(--size-1);
  z-index: var(--layer-important);

  .menuItem {
    position: relative;
    box-shadow: unset;
    block-size: unset;
    border: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: var(--radius-conditional-1);
    background: unset;
    font-size: 0.9rem;
    white-space: nowrap;
    padding-inline: var(--size-2);
    padding-block-start: var(--size-1);
    padding-block-end: calc(
      var(--size-1) + 0.052em
    ); /* 0.052em is the myth value from https://tonsky.me/blog/centering/ */
  }
  .menuItem:hover,
  .menuItem[data-sub-item-active="on"] {
    background-color: var(--surface-2);
  }

  hr {
    margin-block: var(--size-1);
    border: none;
    border-top: var(--border-size-1) solid var(--surface-3);
  }
}

[data-sub-item-active="on"] > .subItem {
  display: flex;
}
[data-sub-item-active="off"] > .subItem {
  display: none;
}
.subItem {
  position: absolute;
  left: calc(100% - var(--size-1));
  top: calc((var(--size-1) + var(--border-size-1)) * -1);
}
.expandLeft {
  left: unset;
  right: calc(100% - var(--size-1));
}
.expandTop {
  top: unset;
  bottom: calc((var(--size-1) + var(--border-size-1)) * -1);
}

#newStickyBtn {
  padding: 0;
  background: unset;
}
#newStickyBtn:hover {
  background: unset;
}

/* HTML hidden attribute failed when the display has been set. So I add this
 * class for the convenience. */
.none {
  display: none !important;
}

data {
  display: none;
}

ul {
  padding-inline-start: var(--size-7);
}

#bookmarkDialog {
  border-radius: var(--radius-conditional-3);
  box-shadow: var(--shadow-3);

  form {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-areas:
      "input"
      "preview"
      "button";
    gap: var(--size-4);

    .gaInput {
      grid-area: input;
      display: flex;
      flex-direction: column;
      gap: var(--size-2);
      align-items: stretch;

      label {
        display: flex;
        gap: var(--size-1);
        flex-direction: column;
      }
    }
    .gaButtonGroup {
      grid-area: button;
    }
    .gaPreview {
      grid-area: preview;
    }
  }
}

.bookmarkPreview {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: space-between;
  cursor: move;

  div {
    display: flex;
    gap: var(--size-1);
  }
}
.bookmark .stickyBody {
  overflow: auto;
}
.bookmark .body {
  display: flex;
  flex-wrap: wrap;
  gap: var(--size-3);

  a,
  a:visited {
    color: var(--text-2);
  }

  .dragOver {
    outline: var(--border-size-2) dotted var(--text-1);
  }
  [draggable] {
    user-select: none;
  }
}
.bookmark.editMode .body {
  flex-direction: column;
}
.ghost.bookmark .stickyBody button {
  display: none;
}
.bookmark:not(.editMode) .stickyBody button {
  display: none;
}

.pureBtn {
  box-shadow: unset;
  --_icon-size: unset;
  border: unset;
  font-weight: unset;
}

hr {
  margin-block: var(--size-fluid-1);
}

.dock {
  position: absolute;
}
.alwaysOnTop {
  z-index: var(--layer-important);
}

.contextMenuBtn {
  padding-block: 0;
  padding-inline: var(--size-1);
  position: absolute;
  transform: translateY(-100%);
  right: 0;
}
.contextMenuBtn:hover {
  background-color: var(--surface-2);
}

.dockItem:hover {
  background-color: var(--surface-2);
  cursor: pointer;
}
.dockItem {
  padding: var(--size-1);
}
#bookmarkDialog {
  .dockItem {
    background-color: var(--surface-1);
    min-block-size: var(--size-10);
  }
  summary {
    margin: 0;
  }
  details {
    padding-inline: 0;

    div {
      padding-top: var(--size-3);
    }
  }
}
.dockBookmark {
  color: var(--text-1);
  text-decoration: none;
  display: grid;

  img {
    justify-self: center;
    align-self: center;
  }

  p {
    align-self: end;
    text-overflow: ellipsis;
    overflow-wrap: break-word;
    text-align: center;
    max-width: var(--size-10);
  }
  p::before {
    content: "\feff";
  }
}

.dummyScreen {
  aspect-ratio: var(--ratio-widescreen);
  width: var(--size-11);
  overflow: hidden;
  margin-bottom: var(--size-2);
  position: relative;
}
#dockAppearanceDialog {
  .radioGroup {
    grid-template-columns: 1fr 1fr;
    flex-wrap: wrap;
    justify-content: space-between;
  }
  .radioOption {
    text-align: center;
  }
  .dummyDock {
    background-color: var(--surface-1);
    position: absolute;
  }
  .dock-top,
  .dock-bottom {
    height: var(--size-3);
    width: 100%;
  }
  .dock-left,
  .dock-right {
    width: var(--size-3);
    height: 100%;
  }
  .dock-top {
    top: 0;
  }
  .dock-bottom {
    bottom: 0;
  }
  .dock-left {
    left: 0;
  }
  .dock-right {
    right: 0;
  }
}

#dockAppearanceDialog::backdrop {
  backdrop-filter: none;
}
.dock[data-position="bottom"] {
  bottom: var(--size-3);
  left: 50%;
  transform: translateX(-50%);
  flex-direction: row;
}
.dock[data-position="top"] {
  top: var(--size-3);
  left: 50%;
  transform: translateX(-50%);
  flex-direction: row;
}
.dock[data-position="left"] {
  left: var(--size-3);
  top: 50%;
  transform: translateY(-50%);
  flex-direction: column;
}
.dock[data-position="right"] {
  right: var(--size-3);
  top: 50%;
  transform: translateY(-50%);
  flex-direction: column;
}

#youtubeDialog {
  label:not(:has([type="checkbox"])) {
    display: flex;
    gap: var(--size-1);
    flex-direction: column;
  }
}
#spotifyDialog {
  label:not(:has([type="checkbox"])) {
    display: flex;
    gap: var(--size-1);
    flex-direction: column;
  }
}
.gaButtonGroup {
  text-align: end;
  button + button {
    margin-inline-start: var(--size-2);
  }
}

dialog {
  padding-block: var(--size-5);
  padding-inline: var(--size-7);
}

#generalDialog {
  .dialogButtonGroup {
    margin-inline-start: var(--size-9);
    text-align: end;
    button + button {
      margin-inline-start: var(--size-2);
    }
  }
}

/* 
 * The [data-tooltip] classes contains a modified version of the hint.css
 * library originally authored by  Kushagra Gour.
 *
 * Credits: https://github.com/chinchang/hint.css
 * */
[data-tooltip]:before,
[data-tooltip]:after {
  position: absolute;
  transform: translate3d(0, 0, 0);
  visibility: hidden;
  opacity: 0;
  z-index: 1000000;
  pointer-events: none;
}
[data-tooltip]:hover:before,
[data-tooltip]:hover:after {
  visibility: visible;
  opacity: 1;
}
[data-tooltip]:hover:before,
[data-tooltip]:before {
  content: "";
  position: absolute;
  background: transparent;
  border: 6px solid transparent;
  background-color: var(--well-1);
  clip-path: polygon(0% 0%, 100% 0%, 100% 100%);
}
[data-tooltip]:after {
  content: attr(data-tooltip);
  border-radius: var(--border-size-3);
  background-color: var(--well-1);
  color: var(--text-1);
  padding: 8px 10px;
  font-size: 1rem;
  line-height: 1rem;
  white-space: nowrap;
}
[data-tooltip] {
  --rotation: -135deg;
  position: relative;
  display: inline-block;
}
[data-tooltip]:before {
  margin-left: -5.5px;
  margin-bottom: -6px;
  transform: rotate(var(--rotation));
}
[data-tooltip]:after {
  margin-bottom: calc(-1 * (1rem + 16px) / 2);
}
[data-tooltip]:before,
[data-tooltip]:after {
  left: 100%;
  bottom: 50%;
}
[data-tooltip]:hover:before {
  transform: translateX(8px) rotate(var(--rotation));
}
[data-tooltip]:hover:after {
  transform: translateX(8px);
}

/* For screen tthat is larger then 640px, stole from Tailwind CSS
 * see also: https://tailwindcss.com/docs/responsive-design */
@media (min-width: 640px) {
  #bookmarkDialog {
    form {
      grid-template-columns: 2fr 1fr;
      grid-template-areas:
        "input preview"
        "input preview"
        "... button";
    }
  }

  .dummyScreen {
    width: var(--size-12);
  }

  #settings {
    grid-template-columns: 2fr 7fr;
    grid-template-areas: "nav main";

    nav {
      display: initial;
    }
  }

  dialog {
    padding-block: var(--size-6);
    padding-inline: var(--size-8);
  }
}
